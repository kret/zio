"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[75390],{3905:(e,n,o)=>{o.d(n,{Zo:()=>d,kt:()=>f});var r=o(67294);function t(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function i(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,r)}return o}function s(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?i(Object(o),!0).forEach((function(n){t(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function c(e,n){if(null==e)return{};var o,r,t=function(e,n){if(null==e)return{};var o,r,t={},i=Object.keys(e);for(r=0;r<i.length;r++)o=i[r],n.indexOf(o)>=0||(t[o]=e[o]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)o=i[r],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}var a=r.createContext({}),p=function(e){var n=r.useContext(a),o=n;return e&&(o="function"==typeof e?e(n):s(s({},n),e)),o},d=function(e){var n=p(e.components);return r.createElement(a.Provider,{value:n},e.children)},m="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var o=e.components,t=e.mdxType,i=e.originalType,a=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),m=p(o),u=t,f=m["".concat(a,".").concat(u)]||m[u]||l[u]||i;return o?r.createElement(f,s(s({ref:n},d),{},{components:o})):r.createElement(f,s({ref:n},d))}));function f(e,n){var o=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=o.length,s=new Array(i);s[0]=u;var c={};for(var a in n)hasOwnProperty.call(n,a)&&(c[a]=n[a]);c.originalType=e,c[m]="string"==typeof e?e:t,s[1]=c;for(var p=2;p<i;p++)s[p]=o[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,o)}u.displayName="MDXCreateElement"},39663:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var r=o(87462),t=(o(67294),o(3905));const i={id:"combining-different-encoders",title:"Combining Different Encoders"},s=void 0,c={unversionedId:"zio-schema/examples/combining-different-encoders",id:"zio-schema/examples/combining-different-encoders",title:"Combining Different Encoders",description:"Let's take a look at a round-trip converting an object to JSON and back, then converting it to a protobuf and back. This is a simple example, but it shows how to combine different encoders to achieve a round-trip.",source:"@site/docs/zio-schema/examples/combining-different-encoders.md",sourceDirName:"zio-schema/examples",slug:"/zio-schema/examples/combining-different-encoders",permalink:"/zio-schema/examples/combining-different-encoders",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/examples/combining-different-encoders.md",tags:[],version:"current",frontMatter:{id:"combining-different-encoders",title:"Combining Different Encoders"},sidebar:"ecosystem-sidebar",previous:{title:"Mapping DTO to Domain Object",permalink:"/zio-schema/examples/mapping-dto-to-domain-object"},next:{title:"ZIO Telemetry",permalink:"/zio-telemetry/"}},a={},p=[],d={toc:p},m="wrapper";function l(e){let{components:n,...o}=e;return(0,t.kt)(m,(0,r.Z)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"Let's take a look at a round-trip converting an object to JSON and back, then converting it to a protobuf and back. This is a simple example, but it shows how to combine different encoders to achieve a round-trip."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'object CombiningExample extends zio.App {\n  import zio.schema.codec.JsonCodec\n  import zio.schema.codec.ProtobufCodec\n  import ManualConstruction._\n  import zio.stream.ZStream\n\n  override def run(args: List[String]): UIO[ExitCode] = for {\n    _ <- ZIO.unit\n    _ <- ZIO.debug("combining roundtrip")\n    person = Person("Michelle", 32)\n\n    personToJson = JsonCodec.encoder[Person](schemaPerson)\n    jsonToPerson = JsonCodec.decoder[Person](schemaPerson)\n\n    personToProto = ProtobufCodec.encoder[Person](schemaPerson)\n    protoToPerson = ProtobufCodec.decoder[Person](schemaPerson)\n\n    newPerson <- ZStream(person)\n      .tap(v => ZIO.debug("input object is: " + v))\n      .transduce(personToJson)\n      .transduce(jsonToPerson)\n      .tap(v => ZIO.debug("object after json roundtrip: " + v))\n      .transduce(personToProto)\n      .transduce(protoToPerson)\n      .tap(v => ZIO.debug("person after protobuf roundtrip: " + v))\n      .runHead\n      .some\n      .catchAll(error => ZIO.debug(error))\n    _ <- ZIO.debug("is old person the new person? " + (person == newPerson).toString)\n    _ <- ZIO.debug("old person: " + person)\n    _ <- ZIO.debug("new person: " + newPerson)\n  } yield ExitCode.success\n}\n')))}l.isMDXComponent=!0}}]);