"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[16665],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4404:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const i={id:"validation",title:"Validation"},o=void 0,s={unversionedId:"zio-schema/operations/validation",id:"zio-schema/operations/validation",title:"Validation",description:"When we create a schema for a type, we can also specify validation rules for the type. Validations are a way to ensure that the data conforms to certain rules.",source:"@site/docs/zio-schema/operations/validating-types.md",sourceDirName:"zio-schema/operations",slug:"/zio-schema/operations/validation",permalink:"/zio-schema/operations/validation",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/operations/validating-types.md",tags:[],version:"current",frontMatter:{id:"validation",title:"Validation"},sidebar:"ecosystem-sidebar",previous:{title:"Transforming Schemas",permalink:"/zio-schema/operations/transforming-schemas"},next:{title:"Diffing and Patching",permalink:"/zio-schema/operations/diffing-and-patching"}},l={},c=[],p={toc:c},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"When we create a schema for a type, we can also specify validation rules for the type. Validations are a way to ensure that the data conforms to certain rules."),(0,r.kt)("p",null,"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"Schema#validate")," we can validate a value against the validation rules of its schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"trait Schema[A] {\n  def validate(value: A)(implicit schema: Schema[A]): Chunk[ValidationError]\n}\n")),(0,r.kt)("p",null,"Let's write a schema for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," case class and add validation rules to it. For example, we can specify that the ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," field must be greater than 0 and less than 120 and the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," field must be non-empty:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.Chunk\nimport zio.schema._\nimport zio.schema.Schema._\nimport zio.schema.validation.Validation\n\ncase class Person(name: String, age: Int)\n\nobject Person {\n  implicit val schema = CaseClass2(\n    id0 = TypeId.fromTypeName("Person"),\n    field01 = Schema.Field(\n      name0 = "name",\n      schema0 = Schema[String],\n      validation0 = Validation.minLength(1),\n      get0 = (p: Person) => p.name,\n      set0 = { (p: Person, s: String) => p.copy(name = s) }\n    ),\n    field02 = Schema.Field(\n      name0 = "age",\n      schema0 = Schema[Int],\n      validation0 = Validation.between(0, 120),\n      get0 = (p: Person) => p.age,\n      set0 = { (p: Person, age: Int) => p.copy(age = age) }\n    ),\n    construct0 = (name, age) => Person(name, age),\n    annotations0 = Chunk.empty\n  )\n}\n')),(0,r.kt)("p",null,"Both fields of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," case class have validation rules. Let's see what happens when we try to validate a ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," value that does not conform to the validation rules:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.schema.validation._\n\nval result: Chunk[ValidationError] = Person.schema.validate(Person("John Doe", 130))\nprintln(result)\n')),(0,r.kt)("p",null,"Due to the failed validation rules, a list of the specific rules that were not met is generated. In this case, it indicates that the age is not equal, or less than 120."))}d.isMDXComponent=!0}}]);