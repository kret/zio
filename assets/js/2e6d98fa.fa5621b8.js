"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[80132],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),m=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=m(e.components);return r.createElement(p.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),g=m(n),u=a,d=g["".concat(p,".").concat(u)]||g[u]||c[u]||o;return n?r.createElement(d,i(i({ref:t},s),{},{components:n})):r.createElement(d,i({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[g]="string"==typeof e?e:a,i[1]=l;for(var m=2;m<o;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},99440:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var r=n(87462),a=(n(67294),n(3905));const o={id:"opentelemetry",title:"OpenTelemetry"},i=void 0,l={unversionedId:"zio-telemetry/opentelemetry",id:"zio-telemetry/opentelemetry",title:"OpenTelemetry",description:"OpenTelemetry is a collection of tools, APIs, and SDKs. You can use it to instrument, generate, collect, and export telemetry data for analysis in order to understand your software's performance and behavior. Well known implementations are Jaeger",source:"@site/docs/zio-telemetry/opentelemetry.md",sourceDirName:"zio-telemetry",slug:"/zio-telemetry/opentelemetry",permalink:"/zio-telemetry/opentelemetry",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-telemetry/opentelemetry.md",tags:[],version:"current",frontMatter:{id:"opentelemetry",title:"OpenTelemetry"},sidebar:"ecosystem-sidebar",previous:{title:"OpenCensus",permalink:"/zio-telemetry/opencensus"},next:{title:"OpenTelemetry Example",permalink:"/zio-telemetry/opentelemetry-example"}},p={},m=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Tracing",id:"tracing",level:3},{value:"Baggage",id:"baggage",level:3},{value:"Logging",id:"logging",level:3},{value:"Context Propagation",id:"context-propagation",level:3},{value:"Usage with OpenTelemetry automatic instrumentation",id:"usage-with-opentelemetry-automatic-instrumentation",level:3}],s={toc:m},g="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"OpenTelemetry is a collection of tools, APIs, and SDKs. You can use it to instrument, generate, collect, and export telemetry data for analysis in order to understand your software's performance and behavior. Well known implementations are ",(0,a.kt)("a",{parentName:"p",href:"https://www.jaegertracing.io"},"Jaeger"),"\nand ",(0,a.kt)("a",{parentName:"p",href:"https://www.zipkin.io"},"Zipkin"),"."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"First, add the following dependency to your build.sbt:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'"dev.zio" %% "zio-opentelemetry" % "<version>"\n')),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("h3",{id:"tracing"},"Tracing"),(0,a.kt)("p",null,"To use ZIO Telemetry, you will need a ",(0,a.kt)("inlineCode",{parentName:"p"},"Tracing")," service in your environment. You also need to provide a ",(0,a.kt)("inlineCode",{parentName:"p"},"Tracer"),"\n(for this example we use ",(0,a.kt)("inlineCode",{parentName:"p"},"JaegerTracer.live")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"opentelemetry-example")," module) and ",(0,a.kt)("inlineCode",{parentName:"p"},"ContextStorage")," implementation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.telemetry.opentelemetry.tracing.Tracing\nimport zio.telemetry.opentelemetry.context.ContextStorage\nimport zio.telemetry.opentelemetry.example.JaegerTracer\nimport io.opentelemetry.api.trace.{ SpanKind, StatusCode }\nimport zio._\n\nval instrumentationScopeName = "com.example.MyApp"\nval resourceName             = "example-app"\n\nval statusMapper = StatusMapper.failureThrowable(_ => StatusCode.UNSET)\n\nval app = ZIO.serviceWithZIO[Tracing] { tracing =>\n    val zio = for {\n      // set an attribute to the current span\n      _       <- tracing.setAttribute("zio", "telemetry")\n      // add an event to the current span\n      _       <- tracing.addEvent("before readline")\n      // some logic\n      message <- Console.readline\n      // add another event to the current span\n      _       <- tracing.addEvent("after readline")\n    } yield message\n    \n    // create a root span out of `zio`\n    zio @@ tracing.aspects.root("root span", SpanKind.INTERNAL, statusMapper)\n    \n}.provide(Tracing.live, ContextStorage.fiberRef, JaegerTracer.live(resourceName, instrumentationScopeName))\n')),(0,a.kt)("h3",{id:"baggage"},"Baggage"),(0,a.kt)("p",null,"To use Baggage API, you also will need a ",(0,a.kt)("inlineCode",{parentName:"p"},"Baggage")," service in your environment. You also need to provide\n",(0,a.kt)("inlineCode",{parentName:"p"},"ContextStorage")," implementation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.telemetry.opentelemetry.baggage.Baggage\nimport zio.telemetry.opentelemetry.baggage.propagation.BaggagePropagator\nimport zio.telemetry.opentelemetry.context.ContextStorage\nimport zio._\n\n val app = ZIO.serviceWithZIO[Baggage] { baggage => \n    val carrier = OutgoingContextCarrier.default()\n  \n    val upstream = for {\n      // add new key/value into the baggage of current tracing context\n      _ <- baggage.set("zio", "telemetry")\n      // import current baggage data into carrier so it can be used by downstream consumer\n      _ <- baggage.inject(BaggagePropagator.default, carrier)\n    } yield ()\n    \n    val downstream = for {\n      // extract current baggage data from the carrier\n      _    <- baggage.extract(BaggagePropagator.default, IncomingContextCarrier.default(carrier.kernel))  \n      // get value from the extracted baggage\n      data <- baggage.get("zio")\n    } yield data\n    \n    upstream *> downstream\n    \n }.provide(Baggage.live, ContextStorage.fiberRef)\n')),(0,a.kt)("h3",{id:"logging"},"Logging"),(0,a.kt)("p",null,"To send Log signals, you need to provide an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"LoggerProvider"),"\n(for this example we use ",(0,a.kt)("inlineCode",{parentName:"p"},"SeqLoggerProvider.live")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"opentelemetry-example")," module) and add a ",(0,a.kt)("inlineCode",{parentName:"p"},"ZLogger")," implementation that is able\nto emit correlated log records to an OpenTelemetry Collector by providing ",(0,a.kt)("inlineCode",{parentName:"p"},"Logging.live")," layer. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.telemetry.opentelemetry.logging.Logging\nimport zio.telemetry.opentelemetry.context.ContextStorage\nimport zio.telemetry.opentelemetry.tracing.Tracing\nimport zio.telemetry.opentelemetry.example.JaegerTracer\nimport zio._\n\nval instrumentationScopeName = "com.example.MyApp"\nval resourceName             = "example-app"\n\nval app = ZIO.serviceWithZIO[Tracing] { tracing =>\n  ZIO.logDebug("not correlated message with \'my-app1\' instrumentation scope")\n    .provideLayer(Logging.live("my-app1", LogLevel.Debug))\n\n  tracing.root("root span")(\n    ZIO.logInfo("correlated message with \'my-app2\' instrumentation scope")\n  ).provideLayer(Logging.live("my-app2"))\n  \n  ZIO.logAnnotate("zio", "logging")(\n    ZIO.logInfo("propagate ZIO log annotations to OTEL log attributes")\n  ).provideLayer(Logging.live("my-app3"))\n}.provide(\n  Tracing.live, \n  JaegerTracer.live(resourceName, instrumentationScopeName), \n  SeqLoggerProvider.live(resourceName), \n  ContextStorage.fiberRef\n)\n')),(0,a.kt)("h3",{id:"context-propagation"},"Context Propagation"),(0,a.kt)("p",null,"To propagate contexts across process boundaries, extraction and injection can be\nused. The current span context is injected into a carrier, which is passed\nthrough some side channel to the next process. There it is extracted back and a\nchild span of it is started."),(0,a.kt)("p",null,"Due to the use of the (mutable) OpenTelemetry carrier APIs, injection and extraction\nare not referentially transparent."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'ZIO.serviceWithZIO[Tracing] { tracing =>\n  val propagator = TraceContextPropagator.default\n  val kernel     = mutable.Map().empty\n  \n  val upstream =\n    tracing.inject(propagator, OutgoingContextCarrier.default(kernel)) @@ tracing.aspects.root("span of upstream service")\n    \n  val downstream =\n    tracing.extractSpan(propagator, IncomingContextCarrier.default(kernel), "span of downstream service")\n    \n  upstream *> downstream\n  \n}.provide(Tracing.live, ContextStorage.fiberRef, JaegerTracer.live(resourceName, instrumentationScopeName))\n')),(0,a.kt)("h3",{id:"usage-with-opentelemetry-automatic-instrumentation"},"Usage with OpenTelemetry automatic instrumentation"),(0,a.kt)("p",null,"OpenTelemetry provides\na ",(0,a.kt)("a",{parentName:"p",href:"https://opentelemetry.io/docs/instrumentation/java/automatic/"},"JVM agent for automatic instrumentation")," which\nsupports\nmany ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/main/docs/supported-libraries.md"},"popular Java libraries"),"."),(0,a.kt)("p",null,"Since ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/tag/v1.25.0"},"version 1.25.0"),"\nOpenTelemetry JVM agent supports ZIO."),(0,a.kt)("p",null,"To enable interoperability between automatic instrumentation and ",(0,a.kt)("inlineCode",{parentName:"p"},"zio-opentelemetry"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Tracing")," has to be created\nusing ",(0,a.kt)("inlineCode",{parentName:"p"},"ContextStorage")," backed by OpenTelemetry's ",(0,a.kt)("inlineCode",{parentName:"p"},"Context")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Tracer")," provided by globally registered ",(0,a.kt)("inlineCode",{parentName:"p"},"TracerProvider"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.telemetry.opentelemetry.tracing.Tracing\nimport zio.telemetry.opentelemetry.context.ContextStorage\nimport zio.telemetry.opentelemetry.example.JaegerTracer\nimport io.opentelemetry.api.trace.{SpanKind, StatusCode}\nimport zio._\n\nval instrumentationScopeName = "com.example.MyApp"\n\nval statusMapper = StatusMapper.failureNoException(_ => StatusCode.UNSET)\n\nval app = ZIO.serviceWithZIO[Tracing] { tracing =>\n    ZIO.logInfo("Hello") @@ tracing.aspects.root("root span", SpanKind.INTERNAL, statusMapper)\n  }.provide(\n    Tracing.live,\n    ContextStorage.openTelemetryContext,\n    ZLayer.fromZIO(ZIO.attempt(GlobalOpenTelemetry.getTracer(instrumentationScopeName)))\n  )\n')))}c.isMDXComponent=!0}}]);