"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[17692],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),g=s(n),u=a,d=g["".concat(l,".").concat(u)]||g[u]||m[u]||i;return n?r.createElement(d,o(o({ref:t},c),{},{components:n})):r.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[g]="string"==typeof e?e:a,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},44106:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={id:"opentracing",title:"OpenTracing"},o=void 0,p={unversionedId:"zio-telemetry/opentracing",id:"zio-telemetry/opentracing",title:"OpenTracing",description:"OpenTracing is a standard and API for distributed tracing, i.e. collecting timings,",source:"@site/docs/zio-telemetry/opentracing.md",sourceDirName:"zio-telemetry",slug:"/zio-telemetry/opentracing",permalink:"/zio-telemetry/opentracing",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-telemetry/opentracing.md",tags:[],version:"current",frontMatter:{id:"opentracing",title:"OpenTracing"},sidebar:"ecosystem-sidebar",previous:{title:"ZIO Telemetry",permalink:"/zio-telemetry/"},next:{title:"OpenTracing Example",permalink:"/zio-telemetry/opentracing-example"}},l={},s=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2}],c={toc:s},g="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"OpenTracing is a standard and API for distributed tracing, i.e. collecting timings,\nand logs across process boundaries. Well known implementations are ",(0,a.kt)("a",{parentName:"p",href:"https://www.jaegertracing.io"},"Jaeger")," and ",(0,a.kt)("a",{parentName:"p",href:"https://www.zipkin.io"},"Zipkin"),"."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"First, add the following dependency to your build.sbt:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'"dev.zio" %% "zio-opentracing" % "<version>"\n')),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"To use ZIO Telemetry, you will need an ",(0,a.kt)("inlineCode",{parentName:"p"},"OpenTracing")," service in your\nenvironment. You also need to provide a ",(0,a.kt)("inlineCode",{parentName:"p"},"tracer")," (for this example we use ",(0,a.kt)("inlineCode",{parentName:"p"},"JaegerTracer.live")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"opentracing-example")," module) implementation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.telemetry.opentracing.OpenTracing\nimport zio.telemetry.opentracing.example.JaegerTracer\nimport zio._\nimport io.opentracing.tag.Tags\n\nval app =\n  ZIO.serviceWithZIO[OpenTracing] { tracing =>\n    import tracing.aspects._\n\n    (for {\n      _       <- ZIO.unit @@ tag(Tags.SPAN_KIND.getKey, Tags.SPAN_KIND_CLIENT)\n      _       <- ZIO.unit @@ tag(Tags.HTTP_METHOD.getKey, "GET")\n      _       <- ZIO.unit @@ setBaggageItem("proxy-baggage-item-key", "proxy-baggage-item-value")\n      message <- Console.readline\n      _       <- ZIO.unit @@ log("Message has been read")\n    } yield message) @@ root("/app")\n  }.provide(OpenTracing.live, JaegerTracer.live("my-app"))\n')),(0,a.kt)("p",null,"After importing ",(0,a.kt)("inlineCode",{parentName:"p"},"import tracing.aspects._"),", additional ",(0,a.kt)("inlineCode",{parentName:"p"},"ZIOAspect")," combinators\non ",(0,a.kt)("inlineCode",{parentName:"p"},"ZIO"),"s are available to support starting child spans, tagging, logging and\nmanaging baggage."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'ZIO.serviceWithZIO[OpenTracing] { tracing =>\n  import tracing.aspects._\n  \n  // start a new root span and set some baggage item\n  val zio1 = ZIO.unit @@ \n    setBaggage("foo", "bar") @@ \n    root("root span")\n\n  // start a child of the current span, set a tag and log a message\n  val zio2 = ZIO.unit @@ \n    tag("http.status_code", 200) @@ \n    log("doing some serious work here!") @@ \n    span("child span")\n}\n')),(0,a.kt)("p",null,"To propagate contexts across process boundaries, extraction and injection can be\nused. The current span context is injected into a carrier, which is passed\nthrough some side channel to the next process. There it is injected back and a\nchild span of it is started. For the example we use the standardized ",(0,a.kt)("inlineCode",{parentName:"p"},"TextMap"),"\ncarrier. For details about extraction and injection, please refer to\n",(0,a.kt)("a",{parentName:"p",href:"https://opentracing.io/docs/overview/inject-extract/"},"OpenTracing Documentation"),". "),(0,a.kt)("p",null,"Due to the use of the (mutable) OpenTracing carrier APIs, injection and extraction\nare not referentially transparent."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'ZIO.serviceWithZIO[OpenTracing] { tracing =>\n  import tracing.aspects._\n  \n  val buffer = new TextMapAdapter(mutable.Map.empty.asJava)\n  for {\n    _ <- ZIO.unit @@ inject(Format.Builtin.TEXT_MAP, buffer)\n    _ <- ZIO.unit @@ spanFrom(Format.Builtin.TEXT_MAP, buffer, "child of remote span")\n  } yield buffer\n}\n')))}m.isMDXComponent=!0}}]);