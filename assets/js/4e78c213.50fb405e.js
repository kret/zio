"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[70065],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),u=o,f=p["".concat(c,".").concat(u)]||p[u]||m[u]||a;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},40994:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var r=n(87462),o=(n(67294),n(3905));const a={id:"integration-with-zio-streams",title:"Integration with ZIO Streams"},i=void 0,s={unversionedId:"zio-schema/integration-with-zio-streams",id:"zio-schema/integration-with-zio-streams",title:"Integration with ZIO Streams",description:"In addition to the regular encode and decode functions, each codec also has a streaming version of these functions called streamEncoder and streamDecoder. By invoking these methods on codecs, we can obtain a ZPipeline where the encoder and decoder are integrated into the ZPipeline stream transformer.",source:"@site/docs/zio-schema/integration-with-zio-streams.md",sourceDirName:"zio-schema",slug:"/zio-schema/integration-with-zio-streams",permalink:"/zio-schema/integration-with-zio-streams",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/integration-with-zio-streams.md",tags:[],version:"current",frontMatter:{id:"integration-with-zio-streams",title:"Integration with ZIO Streams"}},c={},d=[],l={toc:d},p="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In addition to the regular ",(0,o.kt)("inlineCode",{parentName:"p"},"encode")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"decode")," functions, each codec also has a streaming version of these functions called ",(0,o.kt)("inlineCode",{parentName:"p"},"streamEncoder")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"streamDecoder"),". By invoking these methods on codecs, we can obtain a ",(0,o.kt)("inlineCode",{parentName:"p"},"ZPipeline")," where the encoder and decoder are integrated into the ",(0,o.kt)("inlineCode",{parentName:"p"},"ZPipeline")," stream transformer."),(0,o.kt)("p",null,"We can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ZPipline")," to transform (encode/decode) a stream of values of type ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," into a stream of values of type ",(0,o.kt)("inlineCode",{parentName:"p"},"B"),". "),(0,o.kt)("p",null,"For example, assume we have a stream of ",(0,o.kt)("inlineCode",{parentName:"p"},"Person")," values, and we want to encode them into a stream of bytes and then convert back to ",(0,o.kt)("inlineCode",{parentName:"p"},"Person")," values. We can do this as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.stream._\nimport zio.schema._\nimport zio.schema.codec.JsonCodec\n\nobject Main extends ZIOAppDefault {\n  case class Person(name: String, age: Int)\n\n  object Person {\n    implicit val schema: Schema[Person] = DeriveSchema.gen[Person]\n  }\n\n  def run =\n    ZStream\n      .fromIterable(Seq(Person("John", 42)))\n      .debug("the input object is")\n      .via(JsonCodec.schemaBasedBinaryCodec[Person].streamEncoder)\n      .via(ZPipeline.utfDecode)\n      .debug("json string of person")\n      .via(ZPipeline.utf8Encode)\n      .via(JsonCodec.schemaBasedBinaryCodec[Person].streamDecoder)\n      .debug("person after roundtrip")\n      .runDrain\n}\n')))}m.isMDXComponent=!0}}]);