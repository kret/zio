"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[22050],{3905:(e,a,t)=>{t.d(a,{Zo:()=>l,kt:()=>g});var n=t(67294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function c(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),d=function(e){var a=n.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},l=function(e){var a=d(e.components);return n.createElement(i.Provider,{value:a},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=d(t),u=o,g=p["".concat(i,".").concat(u)]||p[u]||m[u]||r;return t?n.createElement(g,s(s({ref:a},l),{},{components:t})):n.createElement(g,s({ref:a},l))}));function g(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=u;var c={};for(var i in a)hasOwnProperty.call(a,i)&&(c[i]=a[i]);c.originalType=e,c[p]="string"==typeof e?e:o,s[1]=c;for(var d=2;d<r;d++)s[d]=t[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},37512:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var n=t(87462),o=(t(67294),t(3905));const r={id:"message-pack",title:"MessagePack Codecs",sidebar_label:"MessagePack"},s=void 0,c={unversionedId:"zio-schema/derivations/codecs/message-pack",id:"zio-schema/derivations/codecs/message-pack",title:"MessagePack Codecs",description:"Introduction",source:"@site/docs/zio-schema/derivations/codecs/messsage-pack.md",sourceDirName:"zio-schema/derivations/codecs",slug:"/zio-schema/derivations/codecs/message-pack",permalink:"/zio-schema/derivations/codecs/message-pack",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/derivations/codecs/messsage-pack.md",tags:[],version:"current",frontMatter:{id:"message-pack",title:"MessagePack Codecs",sidebar_label:"MessagePack"},sidebar:"ecosystem-sidebar",previous:{title:"JSON",permalink:"/zio-schema/derivations/codecs/json"},next:{title:"Protobuf",permalink:"/zio-schema/derivations/codecs/protobuf"}},i={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"BinaryCodec",id:"binarycodec",level:2},{value:"Example",id:"example",level:2}],l={toc:d},p="wrapper";function m(e){let{components:a,...t}=e;return(0,o.kt)(p,(0,n.Z)({},l,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"MessagePack is a binary serialization format designed for efficient data exchange between different systems and languages. In this section, we will explore how to derive MessagePack codecs from a ZIO Schema. MessagePack codecs allow us to easily serialize and deserialize data in MessagePack format."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"To use MessagePack codecs, you need to add the following dependency to your build.sbt file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-schema-msg-pack" % "0.4.15"\n')),(0,o.kt)("h2",{id:"binarycodec"},"BinaryCodec"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"MessagePackCodec")," object inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"zio.schema.codec")," package provides the ",(0,o.kt)("inlineCode",{parentName:"p"},"messagePackCodec")," operator which allows us to derive MessagePack codecs from a ZIO Schema:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"object MessagePackCodec {\n  implicit def messagePackCodec[A](implicit schema: Schema[A]): BinaryCodec[A] = ???\n}\n")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Let's try an example to see how it works:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.schema.codec._\nimport zio.schema.{DeriveSchema, Schema}\n\ncase class Person(name: String, age: Int)\n\nobject Person {\n  implicit val schema: Schema[Person] =\n    DeriveSchema.gen\n  implicit val msgPackCodec: BinaryCodec[Person] =\n    MessagePackCodec.messagePackCodec(schema)\n}\n\nobject Main extends ZIOAppDefault {\n  def run = for {\n    _ <- ZIO.debug("MessagePack Codec Example:")\n    person: Person = Person("John", 42)\n    encoded: Chunk[Byte] = Person.msgPackCodec.encode(person)\n    _ <- ZIO.debug(s"person object encoded to MessagePack\'s binary format: ${toHex(encoded)}")\n    decoded <- ZIO.fromEither(Person.msgPackCodec.decode(encoded))\n    _ <- ZIO.debug(s"MessagePack object decoded to Person class: $decoded")\n  } yield ()\n\n  def toHex(bytes: Chunk[Byte]): String =\n    bytes.map("%02x".format(_)).mkString(" ")\n}\n')),(0,o.kt)("p",null,"The output of the above program is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"MessagePack Codec Example:\nperson object encoded to MessagePack's binary format: 82 a4 6e 61 6d 65 a4 4a 6f 68 6e a3 61 67 65 2a\nMessagePack object decoded to Person class: Person(John,42)\n")))}m.isMDXComponent=!0}}]);