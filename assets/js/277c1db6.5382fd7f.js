"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[23409],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),m=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(c.Provider,{value:t},e.children)},l="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=m(n),h=r,d=l["".concat(c,".").concat(h)]||l[h]||f[h]||o;return n?a.createElement(d,i(i({ref:t},p),{},{components:n})):a.createElement(d,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[l]="string"==typeof e?e:r,i[1]=s;for(var m=2;m<o;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},57113:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var a=n(87462),r=(n(67294),n(3905));const o={id:"transforming-schemas",title:"Transforming Schemas"},i=void 0,s={unversionedId:"zio-schema/operations/transforming-schemas",id:"zio-schema/operations/transforming-schemas",title:"Transforming Schemas",description:"Using the Schema#transform method, we can transform a Schema[A] into a Schema[B] by supplying two functions that can transform between A and B.  In normal Scala code this would be the equivalent of map, but with isomorphism property.",source:"@site/docs/zio-schema/operations/transforming-schemas.md",sourceDirName:"zio-schema/operations",slug:"/zio-schema/operations/transforming-schemas",permalink:"/zio-schema/operations/transforming-schemas",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/operations/transforming-schemas.md",tags:[],version:"current",frontMatter:{id:"transforming-schemas",title:"Transforming Schemas"},sidebar:"ecosystem-sidebar",previous:{title:"The Default Value",permalink:"/zio-schema/operations/the-default-value"},next:{title:"Validation",permalink:"/zio-schema/operations/validation"}},c={},m=[],p={toc:m},l="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(l,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Schema#transform")," method, we can transform a ",(0,r.kt)("inlineCode",{parentName:"p"},"Schema[A]")," into a ",(0,r.kt)("inlineCode",{parentName:"p"},"Schema[B]")," by supplying two functions that can transform between ",(0,r.kt)("inlineCode",{parentName:"p"},"A")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"B"),".  In normal Scala code this would be the equivalent of ",(0,r.kt)("inlineCode",{parentName:"p"},"map"),", but with isomorphism property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"object Schema {\n  def transform[B](f: A => B, g: B => A): Schema[B] = ???\n}\n")),(0,r.kt)("p",null,"Therefore, if we have a schema for ",(0,r.kt)("inlineCode",{parentName:"p"},"A"),", and isomorphism between ",(0,r.kt)("inlineCode",{parentName:"p"},"A")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"B"),", we can derive a schema for ",(0,r.kt)("inlineCode",{parentName:"p"},"B")," in terms of `Schema","[A]","."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"In type theory, isomorphism refers to a relationship between two types that have a bijective correspondence or mapping between their elements. More specifically, if two types, let's say Type ",(0,r.kt)("inlineCode",{parentName:"p"},"A")," and Type ",(0,r.kt)("inlineCode",{parentName:"p"},"B"),", are isomorphic, it means that there exists a pair of functions\u2014one going from A to B (often called the forward function) and another going from B to A (often called the backward function)\u2014that satisfy certain properties.")),(0,r.kt)("p",null,"In ZIO Schema this is modelled by the ",(0,r.kt)("inlineCode",{parentName:"p"},"Transform")," type class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"object Schema {\n  final case class Transform[A, B](\n      codec: Schema[A],\n      f: A => Either[String, B],\n      g: B => Either[String, A]\n    ) extends Schema[B]\n}  \n")),(0,r.kt)("p",null,"For example, assume we have a wrapper class ",(0,r.kt)("inlineCode",{parentName:"p"},"Age")," that wraps an ",(0,r.kt)("inlineCode",{parentName:"p"},"Int")," value, and it has some validation logic, e.g. the age must be between 0 and 120. We can define a ",(0,r.kt)("inlineCode",{parentName:"p"},"Schema[Age]")," by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Schema.transform")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.schema._\n\ncase class Age(i: Int)\n\nobject Age {\n  implicit val schema: Schema[Age] =\n    Schema[Int].transformOrFail(\n      (i: Int) =>\n        if (i >= 0 && i <= 120)\n          Right(Age(i))\n        else\n          Left("Age must be between 1 and 120"),\n      (age: Age) => Right(age.i)\n    )\n}\n')))}f.isMDXComponent=!0}}]);